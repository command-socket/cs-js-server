{"version":3,"sources":["../ts/command-socket-server.ts"],"names":["ws_1","require","avents_1","node_client_1","CommandSocketServer","[object Object]","port","commandRegistry","this","connectionMap","Map","internalServer","Server","events","CommandSocketServerEvents","on","websocket","connection","CommandSocket","set","getID","getEvents","CONNECTION_OPENED","notify","CLOSE","subscribe","event","delete","source","id","has","get","callback","values","forEachConnection","close","exports","AventNotifier","CONNECTION_CLOSED"],"mappings":"oEAMA,MAAAA,KAAAC,QAAA,MACAC,SAAAD,QAAA,UAMAE,cAAAF,QAAA,+BASA,MAAaG,oBAUZC,YAAmBC,EAAcC,GAEhCC,KAAKC,cAAgB,IAAIC,IAEzBF,KAAKG,eAAiB,IAAIX,KAAAY,OAAgB,CAAEN,KAAAA,IAE5CE,KAAKK,OAAS,IAAIC,0BAElBN,KAAKG,eAAeI,GAAG,aAAeC,IAErC,IAAIC,EAAsC,IAAId,cAAAe,cAAcF,EAAWT,GAEvEC,KAAKC,cAAcU,IAAIF,EAAWG,QAASH,GAG3CT,KAAKa,YAAYC,kBAAkBC,OAAON,GAE1CA,EAAWI,YAAYG,MAAMC,UAAWC,IAEvClB,KAAKC,cAAckB,OAAOD,EAAME,OAAOR,aAQnCf,mBAAmBwB,GAEzB,OAAOrB,KAAKC,cAAcqB,IAAID,GAIxBxB,mBAAmBwB,GAEzB,OAAOrB,KAAKC,cAAcsB,IAAIF,GAIxBxB,sBAOAA,kBAAkB2B,GAExB,IAAK,IAAIf,KAAcT,KAAKC,cAAcwB,SAAUD,EAASf,GAIvDZ,YAEN,OAAOG,KAAKK,OAINR,QAENG,KAAK0B,kBAAmBjB,GAAwCA,EAAWkB,SAC3E3B,KAAKG,eAAewB,SAvEtBC,QAAAhC,oBAAAA,oBAoFA,MAAaU,0BAMZT,cAECG,KAAKc,kBAAoB,IAAIpB,SAAAmC,cAC7B7B,KAAK8B,kBAAoB,IAAIpC,SAAAmC,eAT/BD,QAAAtB,0BAAAA","file":"command-socket-server.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t7:55 PM -- September 18th, 2019.\n *\tProject: @command-socket/server\n */\n\nimport WebSocket, { Server as WebSocketServer } from \"ws\";\nimport { AventNotifier } from \"avents\";\nimport {\n\tCommandRegistry,\n\tCommandSetStructure,\n\tFullCommandSet\n} from \"@command-socket/core\";\nimport { CommandSocket } from \"@command-socket/node-client\";\n\n/**\n * A server that is responsible for maintaining many concurrent connections to various clients.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class CommandSocketServer<\n\tLCS extends CommandSetStructure = any,\n\tRCS extends CommandSetStructure = any> {\n\t\n\tprivate connectionMap: Map<string, CommandSocket<LCS, RCS>>;\n\t\n\tprivate internalServer: WebSocketServer;\n\t\n\tprivate readonly events: CommandSocketServerEvents;\n\t\n\tpublic constructor(port: number, commandRegistry?: CommandRegistry<FullCommandSet<LCS>>) {\n\t\n\t\tthis.connectionMap = new Map<string, CommandSocket<LCS, RCS>>();\n\t\t\n\t\tthis.internalServer = new WebSocketServer({ port });\n\t\t\n\t\tthis.events = new CommandSocketServerEvents();\n\t\t\n\t\tthis.internalServer.on(\"connection\", (websocket: WebSocket): void => {\n\t\t\t\n\t\t\tlet connection: CommandSocket<LCS, RCS> = new CommandSocket(websocket, commandRegistry);\n\t\t\t\n\t\t\tthis.connectionMap.set(connection.getID(), connection);\n\t\t\t\n\t\t\t// FIX-ME [11/26/19 @ 1:58 AM] - This is not the correct way to fix the below issue...\n\t\t\tthis.getEvents().CONNECTION_OPENED.notify(connection as unknown as CommandSocket);\n\t\t\t\n\t\t\tconnection.getEvents().CLOSE.subscribe((event: { source: CommandSocket<LCS, RCS> }) => {\n\t\t\t\t\n\t\t\t\tthis.connectionMap.delete(event.source.getID());\n\t\t\t\t\n\t\t\t});\n\t\t\t\n\t\t});\n\t\n\t}\n\t\n\tpublic hasConnectionForID(id: string): boolean {\n\t\t\n\t\treturn this.connectionMap.has(id);\n\t\t\n\t}\n\t\n\tpublic getConnectionForID(id: string): CommandSocket<LCS, RCS> | undefined {\n\t\t\n\t\treturn this.connectionMap.get(id);\n\t\t\n\t}\n\t\n\tpublic getCommandRegistry(): any {\n\t\n\t\t// TODO [10/19/19 @ 5:26 PM] - Finish the 'getCommandRegistry' method.\n\t\treturn undefined;\n\t\n\t}\n\t\n\tpublic forEachConnection(callback: (connection: CommandSocket<LCS, RCS>) => any): void {\n\t\t\n\t\tfor (let connection of this.connectionMap.values()) callback(connection);\n\t\t\n\t}\n\t\n\tpublic getEvents(): CommandSocketServerEvents {\n\t\t\n\t\treturn this.events;\n\t\t\n\t}\n\t\n\tpublic close(): void {\n\t\t\n\t\tthis.forEachConnection((connection: CommandSocket<LCS, RCS>) => connection.close());\n\t\tthis.internalServer.close();\n\t\t\n\t}\n\t\n}\n\n/**\n *\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class CommandSocketServerEvents {\n\t\n\tpublic readonly CONNECTION_OPENED: AventNotifier<CommandSocket>;\n\t\n\tpublic readonly CONNECTION_CLOSED: AventNotifier<void>;\n\t\n\tpublic constructor() {\n\t\t\n\t\tthis.CONNECTION_OPENED = new AventNotifier<CommandSocket>();\n\t\tthis.CONNECTION_CLOSED = new AventNotifier<void>();\n\t\t\n\t}\n\t\n}"]}